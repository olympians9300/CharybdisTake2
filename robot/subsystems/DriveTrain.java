// RobotBuilder Version: 6.1
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Subsystem.

package frc.robot.subsystems;


import frc.robot.commands.*;
import edu.wpi.first.wpilibj.RobotController;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj2.command.SubsystemBase;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.motorcontrol.PWMSparkMax;
import frc.robot.Constants;


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends SubsystemBase {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
private final PWMSparkMax leftAlpha;
private final PWMSparkMax leftBeta;
private final PWMSparkMax rightAlpha;
private final PWMSparkMax rightBeta;

private DifferentialDrive drive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    /**
    *
    */
    public DriveTrain() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
/* left1 = new PWMSparkMax(3);
 addChild("Left1",left1);
 left1.setInverted(false);
 left1.setSafetyEnabled(true); // 3/8/2025 commented out to try https://github.com/EMU4729/Ri3D2025/blob/main/src/main/java/frc/robot/subsystems/DriveSub.java
 left1.setExpiration(.1);      //  also deleted left2, right1, and right2
 left1.feed(); */
        leftAlpha = new PWMSparkMax(Constants.DriveConstants.kLeftAlphaMotorPort);
        leftBeta  = new PWMSparkMax(Constants.DriveConstants.kLeftBetaMotorPort);
        rightAlpha  = new PWMSparkMax(Constants.DriveConstants.kRightAlphaMotorPort);
        rightBeta  = new PWMSparkMax(Constants.DriveConstants.kRightBetaMotorPort);

        rightAlpha.addFollower(rightBeta);
        leftAlpha.addFollower(leftBeta);
        
        drive = new DifferentialDrive(leftAlpha, rightAlpha);
    
        addChild("Differential Drive", drive);
        drive.setSafetyEnabled(true);
        drive.setExpiration(0.1);
        drive.setMaxOutput(1.0);

    }

    @Override
    public void periodic() {
        // This method will be called once per scheduler run
        /*
         *also from bolt.new:
         * 
         public void periodic() {
            // Check controller connection status
            if (!driverController.isConnected()) {
                // Log warning or display on SmartDashboard
                SmartDashboard.putBoolean("Driver Controller Connected", false);
    }
}

         * 
         */

    }

    @Override
    public void simulationPeriodic() {
        // This method will be called once per scheduler run when in simulation

    }

    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void tankDrive(double left, double right){
        drive.tankDrive(left, right);
    }

    public void tankDriveVolts(double leftVolts, double rightVolts) {
        drive.tankDrive(leftVolts / RobotController.getBatteryVoltage(), rightVolts / RobotController.getBatteryVoltage());
    }

    /*
     * *********** form bolt.new
     *
     public void tankDrive(double left, double right) {
        left = Math.abs(left) > Constants.DriveConstants.kDriveDeadband ? left : 0;
        right = Math.abs(right) > Constants.DriveConstants.kDriveDeadband ? right : 0;
        drive.tankDrive(left, right);
}

     * 
     * 
     */


    public void arcadeDrive(double left, double right){
        drive.arcadeDrive(right, left);
    }

    public void stop(){
        tankDrive(0, 0);
    }

}

